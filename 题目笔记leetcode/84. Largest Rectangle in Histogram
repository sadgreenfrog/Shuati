## 
84. Largest Rectangle in Histogram

https://leetcode.com/problems/largest-rectangle-in-histogram/

My Solution

```python
#------------Brute Force, O(n^2)-------------#
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        res = []
        n = len(heights)
        area, maxa = 0, 0
        # find before and after 
        for i in range(n):
            l, r = i-1, i+1
            while l >= 0 or r < n:
                if l >= 0 and heights[l] >= heights[i]:
                    l -= 1
                elif r < n and heights[r] >= heights[i]:
                    r += 1
                else:
                    break
            area = heights[i] * (r-l-1)
            maxa = max(area, maxa)
        return maxa
#-----------------O(n) time, in place solution--------#
class Solution(object):
    def treeToDoublyList(self, root):
       
        def traverse(node):
            nonlocal last, first
            if not node:
                return
            traverse(node.left)
            if last:
                last.right = node
                node.left = last
            else:
                first = node
            last = node
            traverse(node.right)
        
        if not root: return None
        first = last = None
        traverse(root)
        last.right = first
        first.left = last
        return first

```
## 解题思路
ement 
1. Brute Force: Iterate through the heights and calculate max area of each height. One for loop to locate the current height, then using 2 pointers 
to find the index of the element which just smaller than current one on the left and right respectively.

2. In-place method: Solve it without usig extra space and modify nodes in-place.84. Largest Rectangle in Histogram

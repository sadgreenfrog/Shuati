## 
119. Pascal's Triangle II

https://leetcode.com/problems/pascals-triangle-ii/

My Solution

```python
#---------------Top - Down, 倒推-------------------------#
class Solution(object):
    def getRow(self, numRows):
        if numRows == 0: return [1]
        return self.rec(numRows)
    # Bottom up
    def rec(self, n):
        if n == 1: return [1,1]
        path = [1 for _ in range(n+1)]
        last = self.rec(n-1)
        for i in range(1,n):
            path[i] = last[i-1] + last[i]
        return path
#-------------------------Bottom - up 正推----------------------------#
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        if rowIndex == 0: return [1]
        if rowIndex == 1: return [1,1]
        previous = [1,1]
        # Traverse from top to bottom
        for i in range(2, rowIndex+1):
            # Refresh previous DP array
            dp = [1 for _ in range(i+1)]
            for j in range(1,i):
                dp[j] = previous[j-1] + previous[j]
            previous = dp
        return previous       
```

## 思路想法
1. top-down recursion(倒推): It's a great example to understand how recursive works. Mainly composed by 3 parts: termination condition/Single layer logic/Return value.
In this problem, termination: if n == 1: return [1,1], return: path, single layer: last = def(n-1) cur[i] = last[i-1] + last[i]. Not each recursive need the return 
value.

2. bottom-up recursiove(正推): it's a dp solution. unlike the previous solution, its' start from n == 1, then recurse back to the n.
